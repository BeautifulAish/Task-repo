1. String Function
capitalize( ) function

lower( ) function

title( ) function

casefold( ) function

upper( ) function

count( ) function

find( ) function

replace( ) function

swapcase( ) function

join( ) function

capitalize()Converts the first

character to upper case

casefold()Converts string into

lower case

center()Returns a centered

string

count()Returns the number of

times a specified value occurs in a string

encode()Returns an encoded

version of the string

endswith()Returns true if the

string ends with the specified value

expandtabs()Sets the

tab size of the string

find()Searches the string for a

specified value and returns the position of where it was found

format()Formats specified

values in a string

format_map()Formats specified

values in a string

index()Searches the string

for a specified value and returns the position of where it was found

isalnum()Returns True if all

characters in the string are alphanumeric

isalpha()Returns True if all

characters in the string are in the alphabet

isascii()Returns True if all

characters in the string are ascii characters

isdecimal()Returns True if all

characters in the string are decimals

isdigit()Returns True if all

characters in the string are digits

isidentifier()Returns True if

the string is an identifier

islower()Returns True if all

characters in the string are lower case

isnumeric()Returns True if

all characters in the string are numeric

isprintable()Returns True if

all characters in the string are printable

isspace()Returns True if all

characters in the string are whitespaces

istitle()

Returns True if the string follows the rules of a

title

isupper()Returns True if all

characters in the string are upper case

join()Converts the elements of

an iterable into a string

ljust()Returns a left justified

version of the string

lower()Converts a string into

lower case

lstrip()Returns a left trim

version of the string

maketrans()Returns a

translation table to be used in translations

partition()Returns a tuple

where the string is parted into three parts

replace()Returns a string

where a specified value is replaced with a specified value

rfind()Searches the string for

a specified value and returns the last position of where it was found

rindex()Searches the string for

a specified value and returns the last position of where it was found

rjust()Returns a right justified

version of the string

rpartition()Returns a tuple

where the string is parted into three parts

rsplit()Splits the string at

the specified separator, and returns a list

rstrip()Returns a right trim

version of the string

split()Splits the string at

the specified separator, and returns a list

splitlines()Splits the string

at line breaks and returns a list

startswith()Returns true if

the string starts with the specified value

strip()Returns a trimmed version of the string

swapcase()Swaps cases, lower

case becomes upper case and vice versa

title()Converts the first

character of each word to upper case

translate()Returns a

translated string

upper()Converts a string

into upper case

zfill()Fills the string with

a specified number of 0 values at the beginning

2. Task 1
s1="PPPP"
s2="pppp"
s3="abccDEE"

#id of string
print(id(s1))
print(id(s2))

#lower
s1=s1.lower()
print(s1)

#capitalize
print(s3.capitalize())
print(s3.title())


#upper
s2=s2.upper()
print(s2)

#length
print(len(s1))
print(len(s2))

#swapcase
s3=s3.swapcase()
print(s3)

#title
s4="sdsdsd sdsdsdsdsd sdsdsdDD"
print(s4.title())

#replace
s5="Hello AB"
s5=s5.replace("Hello","Bye")
print("*******",s5)

#index
s6="Hiiii ABIIIhHi"
print(s6.index("Hi"))

#find char
s6="Hiiii ABIIIhHi"
print(s6[8])

#count
print(s6.count("Hi"))


# if s1==s2:
#     print("yes")
# else:
#     print("no")

3. 
ss=set()

while True:
    res = input("Do you want to enter data YES/NO : ")
    if res=="YES" or res=="yes" or res=="Yes" or res=="y" or res=="Y":
        # data=int(input("Enter data :"))
        data = input("Enter data : ")
        ss.add(data)
    else:
        break

print(ss)
